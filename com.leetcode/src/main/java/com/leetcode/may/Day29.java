package com.leetcode.may;

import java.util.*;

/**
 * @description:
 * @version: 1.0
 * @date: 2021-05-29 22:30:01
 * @author: wanglong16@meicai.cn
 */
public class Day29 {

    public int countGoodSubstrings(String s) {
        int ret = 0;
        for (int i = 0; i < s.length() - 2; i++) {
            if (isUniq(s.substring(i, i + 3))) {
                ret ++;
            }
        }
        return ret;
    }

    public boolean isUniq(String str) {
        return str.charAt(0) != str.charAt(1) && str.charAt(1) != str.charAt(2)
                && str.charAt(0) != str.charAt(2);
    }


    public int minPairSum(int[] nums) {
        Arrays.sort(nums);
        int[][] numPairs = new int[nums.length / 2][2];
        for (int i = 0; i < numPairs.length; i++) {
            numPairs[i][0] = nums[i];
            numPairs[i][1] = nums[nums.length - i - 1];
        }
        int max = Integer.MIN_VALUE;
        for (int[] numPair : numPairs) {
            max = Math.max(numPair[0] + numPair[1], max);
        }
        return max;
    }


    public int[] getBiggestThree(int[][] grid) {
        int row = grid.length, col = grid[0].length;
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                int maxExt = Math.min(Math.min(row - i - 1, i), Math.min(col - j - 1, j));
                for (int ext = 0; ext <= maxExt ; ext++) {
                    set.add(calculatePosXY(grid, i, j, ext));
                }
            }
        }
        List<Integer> list = new ArrayList<>(set);
        Collections.sort(list);
        if (list.size() >= 3) {
            return new int[]{list.get(list.size() - 1),list.get(list.size() - 2),list.get(list.size() - 3)};
        }
        if (list.size() == 2) {
            return new int[]{list.get(list.size() - 1),list.get(list.size() - 2)};
        }
        if (list.size() == 1) {
            return new int[]{list.get(list.size() - 1)};
        }
        return new int[]{};
    }

    public int calculatePosXY(int [][] grid, int r, int c, int ext) {
        if (ext == 0) {
            return grid[r][c];
        }
        int ret = 0;
        for (int i = 0; i < ext; i ++) {
            ret += grid[r - ext + i][c + i];
        }
        for (int i = 0; i < ext; i ++) {
            ret += grid[r + i][c + ext - i];
        }
        for (int i = 0; i < ext; i ++) {
            ret += grid[r + ext - i][c - i];
        }
        for (int i = 0; i < ext; i ++) {
            ret += grid[r - i][c - ext + i];
        }
        return ret;
    }

    /**
     * [[36240,48571,27490,60162,40204,50509,15320,42101,77019,9805,98928,2042,5848,93087,2764,47869,33723,66911,42230,23825,2054,47527,63422,90294,3422,37587,5535,50312,2420,55972,74213,21803,68059,48566,99041,2202,8970,63132,74608,83637,99211,55109],[1040,31600,34922,13026,82358,59800,20400,78747,58747,20472,9464,11540,56766,12329,43511,54906,44902,26442,78256,4352,59283,23708,97711,2292,88767,65648,61017,85166,85968,12111,42539,54422,62539,57289,32999,39349,11055,99079,35112,34942,67459,52346],[35704,89140,24275,54200,5306,72870,61281,34392,36722,43914,68899,83381,70549,13586,7643,95877,83532,61617,20276,52050,65049,90193,70080,86869,47584,93763,90814,5030,8337,49767,71713,6820,82537,83757,11443,29829,88287,83295,23362,78250,45930,3426],[92722,37999,94677,73634,71863,69121,78417,65878,80397,93327,92222,59385,21091,15142,11578,73837,64437,94523,56408,12058,18710,56836,2064,34689,12538,69190,13809,22399,73505,70141,88834,12034,90801,16011,87870,45371,49551,57316,50891,2613,98999,86617],[8318,29376,99217,13935,66104,49447,12245,30647,48786,8122,5083,291,59596,84698,48356,50774,48154,80104,25768,94651,85878,60158,21878,27600,79397,58174,79624,73785,93861,36046,45429,13183,29430,86366,85764,56383,58617,56126,96613,37411,83208,39342],[68120,97199,52652,5678,23603,71864,11569,15879,5552,25338,25944,39091,5221,53057,44218,21960,61320,23254,72164,61883,18699,58334,7006,56373,4664,86053,77569,53558,86126,24206,39809,35413,72461,63615,93774,67613,84307,1836,79669,61014,81274,54674],[77300,77140,40907,97722,89128,17007,51848,47024,9764,43068,82262,19335,55964,18294,11310,13167,53846,78534,58332,25147,50750,35832,75082,95790,66361,20086,56389,77485,20293,91672,53245,15882,21742,71672,70833,4142,65389,70260,54708,70017,17929,32641],[32881,35838,45013,92446,48958,33926,81036,87635,63370,42598,11663,98862,24911,36648,57404,6477,3005,51651,95662,43094,4266,4964,72556,27319,88135,64313,5286,23902,54141,48421,90531,45611,48083,23942,90493,87395,50718,59057,69568,16293,8102,89775],[79302,89523,6985,3507,36702,45028,80238,91260,28379,93840,64792,3971,75594,51157,65153,3362,14172,27826,24881,28707,96827,30175,39380,86285,86960,19456,91147,2309,97618,35609,29449,60472,9419,95747,19351,67691,34361,21784,32004,25005,75022,77945],[26808,18852,56279,93416,31014,67510,67659,90872,57975,1335,59989,33583,14919,50181,19164,29600,97100,29671,63929,22585,11047,31024,96684,73843,63290,246,46297,29080,91427,69999,17127,33892,11231,62669,21735,73378,23797,25906,40538,99561,2414,94879],[42554,12653,35022,79649,4130,5492,57954,73142,38149,39544,12278,48076,63129,57540,25172,30967,18620,1460,4608,52417,1573,50437,29897,96893,87106,95910,78178,46361,76415,10202,44297,6952,21756,38573,47334,29555,65907,77288,58226,49790,38590,42884],[96589,24854,57964,50845,37537,57204,24956,72357,73980,77569,2655,90559,48420,5096,56260,85576,64680,5,13501,83607,40359,56414,81284,69861,51859,93054,89896,58016,29394,47356,73161,6687,24787,6381,86269,79803,65824,79543,90751,69919,42857,58466],[30196,31830,58028,66603,62045,87695,74325,2973,19902,3035,36245,34424,56814,46791,71449,25809,60418,82327,24611,66623,84292,75983,41674,825,80061,43090,47768,20570,85088,38011,35727,77088,71042,25909,24016,19413,98034,1913,63045,69495,61770,44372],[21845,63032,44268,1090,3051,85020,15562,59370,48255,35076,20100,26030,26980,30455,45339,96697,135,61032,69035,55445,29188,69168,43385,47799,19993,17206,60950,88549,73864,64713,49729,23276,28560,79100,52459,82316,48067,10235,32917,33470,80652,30337],[23994,28119,75877,43465,57445,85179,97854,23796,64685,6246,2475,29514,59434,81390,17119,41515,81745,81273,41078,42848,14385,63788,24869,97924,66957,50769,84264,92013,7556,20790,27159,88085,66675,40583,49363,99345,4606,69340,36004,56774,17883,84265],[49557,32279,87024,17161,45931,41079,91936,73073,96501,55368,70868,48433,88385,81033,17949,38501,92352,17745,14265,42419,10666,39443,76348,33672,71930,8669,46201,75239,22464,36131,44531,94547,14511,25614,60854,52768,41494,81581,69313,28995,79753,36794],[18737,82859,16620,45595,84826,58583,27703,54143,82141,65064,75734,79490,3627,41219,42711,46767,64930,39041,93374,22394,93264,16315,28412,88164,57995,9111,28498,51157,96382,88747,22780,45999,57920,51675,2473,34068,96541,57586,87275,34124,87123,50930],[93041,17820,37823,35416,69473,2469,50123,6011,23794,16426,3892,15319,86658,17800,61762,66789,60318,27551,26071,55937,53949,82141,80266,76650,51360,25967,97103,56904,81123,50788,39314,47748,83644,26171,79645,93206,38435,1297,68768,37963,39738,30305],[86284,30978,73784,70964,38254,96097,40908,68999,49195,7210,90361,71733,50936,54231,72373,26697,36144,64393,15197,50008,59629,7564,62989,89738,79372,60340,7417,88339,85545,76800,16103,90729,25392,31341,83774,11637,26298,37658,10564,19850,54609,70093],[11395,40099,93599,99242,17373,97536,11119,27663,87075,90280,87325,47637,6294,67306,80978,62512,72410,32505,79685,6910,38085,46877,27628,42307,19632,8130,36459,18046,66016,19661,20667,33527,19734,91793,33779,55326,9134,7962,86523,63650,65911,22978],[26039,54161,46435,96872,64475,90986,16090,12524,97148,73847,22244,89350,25573,14647,56038,689,72507,88801,73397,28700,81350,29413,50364,19160,27722,93211,32116,11309,31627,36239,27910,87175,86575,66227,83721,26564,47285,65339,19849,31053,26174,28383],[23173,11867,35677,27438,69323,95732,44756,35635,66078,22046,939,43435,25603,21950,42655,52069,92138,59976,90160,86940,76158,50236,80359,27314,33571,60043,89778,31786,27526,44957,91524,35806,22220,28679,92492,43984,67829,3336,58305,61607,9802,77613],[52369,25849,81431,95384,41983,33289,81652,59973,38571,71470,36258,16420,11873,6581,9315,58169,91777,36109,14559,34834,44297,19351,8115,7029,24347,96815,8043,31486,98053,17387,89869,83292,88532,755,17955,32382,93513,77111,91469,94820,36234,17524],[52964,11611,18519,2780,95207,39394,770,89120,81579,41649,35710,78853,28114,88316,17804,4554,31205,4177,87678,93701,11849,85569,24485,94833,10723,79787,72224,90971,56295,37832,52323,52118,10957,40120,44235,67640,79291,18157,34860,20087,45395,26642],[11030,42923,40492,6954,64226,34145,76203,54830,1934,15851,71088,50198,86672,85675,40693,29353,33766,57441,73316,11573,13473,42584,38188,81587,41052,98810,40432,65200,53644,471,29250,344,97736,31681,14138,49690,55027,32612,20213,22836,35769,34040],[80474,9105,10533,19897,1128,71622,83060,81897,43106,87263,85160,7421,92309,22073,93706,99577,41020,39588,39228,45373,35927,12928,19274,63113,94472,60071,63280,62412,60477,47039,84557,31157,18685,90684,46755,75592,53540,20621,12554,77625,77427,51796],[99225,55904,58913,27553,51675,41185,45490,15834,17059,81377,21253,82877,80980,34049,31712,98841,44747,34155,46409,36962,75362,16116,44473,55919,94104,80899,5656,3999,16996,77776,80845,3064,17135,22130,38677,22876,24101,77539,96823,31693,22145,77217],[80798,46928,90,46160,70418,63411,44044,59787,22275,9728,69409,97205,86944,36526,34257,39331,89572,93128,88466,31879,16631,17180,22589,26246,12855,39784,76189,26099,51132,63681,4759,35266,91525,33493,27787,10626,68192,31026,84083,92625,28865,45401],[86234,85004,28642,58488,76812,64896,65546,22829,30305,77262,67407,35487,59652,16399,78492,51422,48703,30322,71903,54352,3085,50484,41200,19173,14959,85275,34604,93426,648,95661,53032,33825,98176,61224,38685,14091,92944,25519,47708,79337,3200,87164],[1268,19692,86723,25772,12819,69150,20155,99018,61564,79214,92623,52370,57598,94080,75748,90457,50999,45149,17395,26656,22972,33960,1925,40751,50949,81628,24136,43540,19692,53030,78593,90785,78804,60977,81681,24717,42687,30429,66084,56565,44650,66696],[67056,92182,94300,57902,95920,81574,68442,37001,68977,31854,74537,24443,91895,4928,83915,95163,1336,36124,43856,62439,65558,7371,46986,11931,34266,60154,23548,32104,27567,80511,33636,45212,83581,80674,88683,80090,11541,30388,6884,70392,14737,93295],[3821,47253,78528,13320,53349,19323,17685,12580,95472,50138,33050,75447,74424,38545,17237,19767,20191,30619,85127,94317,40955,24486,93550,83530,20170,58586,50108,34030,11407,72846,27326,16079,33373,16540,18217,1626,24216,28822,89467,86521,37079,25762],[79536,13578,73135,755,12177,73833,97374,66936,2032,2215,81746,54222,65177,65827,19913,69887,796,18393,55486,70282,423,23601,55998,52104,89452,40835,75408,68013,14829,92697,11616,51756,4263,94333,45691,30244,58847,37924,44839,32936,90963,12801],[53500,58416,90359,38077,93916,22183,39517,36702,93686,44422,11247,65553,66669,25317,93321,91809,14432,76029,64550,74529,47212,49594,27317,89411,16521,32740,62255,71402,65090,73762,67566,1543,64715,80246,97938,71122,47174,70236,74273,8899,3837,41175],[24528,19121,70558,31712,53290,93907,29900,9828,77759,17083,63818,27207,13615,77182,4135,37696,73611,7591,32617,84649,37055,66928,48511,74678,20347,69157,26469,33865,49788,42647,75178,12142,18744,43428,25584,10689,99116,96436,59970,90832,25112,25262],[41759,69031,35452,3828,43760,55304,45701,75956,48754,70551,21817,66660,76613,46607,14581,41753,2086,86487,43244,84903,68918,22931,17670,534,2391,59537,11093,31712,46066,4908,27120,70909,40598,62115,85057,35816,87664,48564,96576,30068,51487,76794],[73512,23219,43116,8134,22743,30395,5563,34053,48673,27298,51829,81878,53615,45459,2906,24641,8344,56696,86438,30986,45035,12765,97880,5027,49177,97961,13930,70650,97998,89261,65959,32741,70458,24774,46768,71643,77253,67565,52021,69914,48387,67366],[54707,42019,54674,13308,43074,27833,74210,65897,97599,4984,75442,67038,76462,13998,51030,49165,79887,40973,61358,3370,94872,40714,56637,4010,72201,22496,71334,37354,94100,89994,70793,68434,16745,14646,68680,99055,80384,67118,17714,55186,64417,76353],[72387,80995,1937,40083,82586,74291,91856,25072,18583,56958,9412,89359,41412,65026,51587,99435,30618,81933,26447,39617,63769,73641,52215,18151,87817,36749,86526,81736,98888,44071,42621,10610,94075,83227,43018,66592,17820,11259,40247,41302,96749,75769],[79048,40978,87094,43149,83485,61412,26245,13018,28999,2420,50839,99598,42774,76219,74776,13495,80177,33924,38580,41647,62880,83886,33295,31309,96719,82987,95793,78357,93671,18739,12489,3529,4031,92113,1589,73861,85397,39600,69446,10175,6974,98549],[26351,53499,49201,99189,54334,21742,51542,35429,79134,20060,37432,23230,3396,12215,98853,19718,41840,97011,11862,74418,36109,3301,22463,82922,41751,62639,34932,23367,78356,89790,52605,14615,70867,73346,51627,94906,76350,55466,25418,85179,42642,2037]]
     * @param args
     */

    /**
     * 207. 课程表
     * 你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。
     *
     * 在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程  bi 。
     *
     * 例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。
     * 请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。
     *
     *
     *
     * 示例 1：
     *
     * 输入：numCourses = 2, prerequisites = [[1,0]]
     * 输出：true
     * 解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。
     * 示例 2：
     *
     * 输入：numCourses = 2, prerequisites = [[1,0],[0,1]]
     * 输出：false
     * 解释：总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。
     *
     *
     * 提示：
     *
     * 1 <= numCourses <= 105
     * 0 <= prerequisites.length <= 5000
     * prerequisites[i].length == 2
     * 0 <= ai, bi < numCourses
     * prerequisites[i] 中的所有课程对 互不相同
     */
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, Integer> map = new HashMap<>(prerequisites.length * 2);
        for (int[] pre : prerequisites) {
            map.put(pre[0], pre[1]);
        }
        Set<Integer> courses = new HashSet<>();
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (map.containsKey(entry.getValue())) {
                Integer val = entry.getValue();
                Set<Integer> keys = new HashSet<>();
                keys.add(entry.getKey());
                while (map.containsKey(val)) {
                    val = map.get(val);
                    if (keys.contains(val)) {
                        return false;
                    }
                    keys.add(val);
                }
            } else {
                courses.add(entry.getKey());
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Day29 day29 = new Day29();
        int[][] t = new int[][] {{1,2,3},{4,5,6},{7,8,9}};
        System.out.println(day29.getBiggestThree(t));
    }
}
